# app.py
import os
from pelicula import Pelicula
from catalogo_peliculas import CatalogoPeliculas
from utils import normalizar_espacios, BASE_DIR_CATALOGOS


def main():
    """Men√∫ principal del programa Cat√°logo de Pel√≠culas"""
    while True:
        print("\nüé¨ === MEN√ö PRINCIPAL ===")
        print("1) Crear cat√°logo nuevo")
        print("2) Ver cat√°logos existentes")
        print("3) Trabajar con un cat√°logo")
        print("4) Eliminar un cat√°logo")
        print("5) Salir")

        op = input("\nEleg√≠ una opci√≥n: ").strip()

        if op == "1":
            nombre = input("üìÅ Nombre del nuevo cat√°logo: ").strip()
            if not nombre:
                print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
                continue
            catalogo = CatalogoPeliculas(nombre)
            print(f"‚úÖ Cat√°logo '{nombre}' creado en {catalogo.ruta_archivo}")

        elif op == "2":
            mostrar_catalogos()

        elif op == "3":
            nombre = input("üìÇ Ingres√° el nombre del cat√°logo existente: ").strip()
            if not nombre:
                print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
                continue
            catalogo = CatalogoPeliculas(nombre)
            submenu_catalogo(catalogo)

        elif op == "4":
            eliminar_catalogo()

        elif op == "5":
            print("üëã ¬°Gracias por usar el Cat√°logo de Pel√≠culas!")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida. Intent√° nuevamente.")


def mostrar_catalogos():
    """Muestra los cat√°logos disponibles"""
    if not os.path.exists(BASE_DIR_CATALOGOS):
        print("üìÇ No hay cat√°logos creados todav√≠a.")
        return

    archivos = [f for f in os.listdir(BASE_DIR_CATALOGOS) if f.endswith(".txt")]
    if not archivos:
        print("üìÇ No hay cat√°logos creados todav√≠a.")
        return

    print("\nüìÅ Cat√°logos disponibles:")
    for i, a in enumerate(archivos, start=1):
        print(f"  {i}. {a[:-4]}")


def eliminar_catalogo():
    """Elimina un cat√°logo existente"""
    mostrar_catalogos()
    nombre = input("\nüìÅ Nombre del cat√°logo a eliminar: ").strip()
    if not nombre:
        print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
        return

    path = os.path.join(BASE_DIR_CATALOGOS, f"{nombre}.txt")
    if os.path.exists(path):
        confirm = input(f"¬øSeguro que quer√©s eliminar '{nombre}'? (s/n): ").strip().lower()
        if confirm == "s":
            os.remove(path)
            print("üóëÔ∏è Cat√°logo eliminado correctamente.")
        else:
            print("‚ùå Operaci√≥n cancelada.")
    else:
        print("‚ö†Ô∏è Ese cat√°logo no existe.")


def submenu_catalogo(catalogo: CatalogoPeliculas):
    """Submen√∫ para trabajar con un cat√°logo espec√≠fico"""
    while True:
        print(f"\nüéûÔ∏è === Cat√°logo activo: {catalogo.nombre} ===")
        print("1) Agregar pel√≠cula")
        print("2) Listar pel√≠culas")
        print("3) Eliminar pel√≠cula")
        print("4) Volver al men√∫ principal")

        sub_op = input("\nEleg√≠ una opci√≥n: ").strip()

        # ---------- Agregar pel√≠cula ----------
        if sub_op == "1":
            titulo = input("üé• Ingres√° el nombre de la pel√≠cula: ").strip()
            if not titulo:
                print("‚ö†Ô∏è El t√≠tulo no puede estar vac√≠o.")
                continue

            # El g√©nero se toma del nombre del cat√°logo
            genero_derive = normalizar_espacios(catalogo.nombre).capitalize()

            anio_str = input("üìÖ A√±o de estreno (opcional, Enter para omitir): ").strip()
            anio = 0
            if anio_str:
                try:
                    anio = int(anio_str)
                except ValueError:
                    print("‚ö†Ô∏è A√±o inv√°lido. Se guardar√° sin a√±o.")
                    anio = 0

            try:
                peli = Pelicula(titulo, genero_derive, anio)
                if catalogo.agregar(peli):
                    print(f"‚úÖ '{peli}' agregada correctamente.")
                else:
                    print("‚ö†Ô∏è Esa pel√≠cula ya existe en el cat√°logo.")
            except ValueError as e:
                print(f"‚ö†Ô∏è {e}")

        # ---------- Listar pel√≠culas ----------
        elif sub_op == "2":
            peliculas = catalogo.listar()
            if not peliculas:
                print("üìÇ El cat√°logo est√° vac√≠o.")
            else:
                print("\nüé¨ Pel√≠culas:")
                for p in peliculas:
                    print(f"  - {p}")

        # ---------- Eliminar pel√≠cula ----------
        elif sub_op == "3":
            peliculas = catalogo.listar()
            if not peliculas:
                print("üìÇ El cat√°logo est√° vac√≠o.")
                continue

            print("\nüéûÔ∏è Pel√≠culas disponibles:")
            for i, p in enumerate(peliculas, start=1):
                print(f"  {i}. {p}")

            idx_str = input("\nüóëÔ∏è Ingres√° el n√∫mero de la pel√≠cula a eliminar: ").strip()
            if not idx_str.isdigit():
                print("‚ö†Ô∏è Valor inv√°lido.")
                continue

            idx = int(idx_str)
            if not (1 <= idx <= len(peliculas)):
                print("‚ö†Ô∏è N√∫mero fuera de rango.")
                continue

            peli = peliculas[idx - 1]
            catalogo.eliminar(peli)
            print(f"üóëÔ∏è '{peli}' eliminada correctamente.")

        elif sub_op == "4":
            print("‚Ü©Ô∏è Volviendo al men√∫ principal...")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida.")


if __name__ == "__main__":
    main()
