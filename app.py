# app.py
import os
from catalogo_peliculas import CatalogoPeliculas
from pelicula import Pelicula
from utils import BASE_DIR_CATALOGOS


# ======= MEN√öS =======

def menu_principal():
    print("\nüé¨ === MEN√ö PRINCIPAL ===")
    print("1) Crear cat√°logo nuevo")
    print("2) Ver cat√°logos existentes")
    print("3) Trabajar con un cat√°logo")
    print("4) Eliminar un cat√°logo")
    print("5) Salir del programa")
    return input("Eleg√≠ una opci√≥n (1-5): ").strip()


def menu_catalogo(nombre):
    print(f"\nüìÅ === Cat√°logo activo: {nombre} ===")
    print("1) Agregar pel√≠cula")
    print("2) Listar pel√≠culas")
    print("3) Eliminar pel√≠cula")
    print("4) Volver al men√∫ principal")
    return input("Eleg√≠ una opci√≥n (1-4): ").strip()


def obtener_catalogos_existentes():
    """Devuelve una lista con los nombres de los cat√°logos .txt existentes."""
    if not os.path.exists(BASE_DIR_CATALOGOS):
        return []
    archivos = [
        f.replace(".txt", "")
        for f in os.listdir(BASE_DIR_CATALOGOS)
        if f.endswith(".txt")
    ]
    return archivos


# ======= PROGRAMA PRINCIPAL =======

def main():
    print("üéûÔ∏è Bienvenid@ al Gestor de Cat√°logos de Pel√≠culas üéûÔ∏è")

    while True:
        opcion = menu_principal()

        # 1Ô∏è‚É£ Crear nuevo cat√°logo
        if opcion == "1":
            nombre = input("üÜï Ingres√° el nombre del nuevo cat√°logo: ").strip()
            if not nombre:
                print("‚ö†Ô∏è El nombre no puede estar vac√≠o.")
                continue
            ruta = os.path.join(BASE_DIR_CATALOGOS, f"{nombre}.txt")
            if os.path.exists(ruta):
                print("‚ö†Ô∏è Ya existe un cat√°logo con ese nombre.")
            else:
                open(ruta, "w", encoding="utf-8").close()
                print(f"‚úÖ Cat√°logo '{nombre}' creado correctamente.")

        # 2Ô∏è‚É£ Ver cat√°logos existentes
        elif opcion == "2":
            catalogos = obtener_catalogos_existentes()
            if not catalogos:
                print("üì≠ No hay cat√°logos creados a√∫n.")
            else:
                print("\nüìö Cat√°logos disponibles:")
                for i, cat in enumerate(catalogos, start=1):
                    print(f"  {i}. {cat}")

        # 3Ô∏è‚É£ Trabajar con un cat√°logo
        elif opcion == "3":
            catalogos = obtener_catalogos_existentes()
            if not catalogos:
                print("‚ö†Ô∏è No hay cat√°logos disponibles. Cre√° uno primero.")
                continue

            print("\nüìö Cat√°logos existentes:")
            for i, cat in enumerate(catalogos, start=1):
                print(f"  {i}. {cat}")
            try:
                idx = int(input("Seleccion√° un n√∫mero de cat√°logo: "))
                nombre_sel = catalogos[idx - 1]
            except (ValueError, IndexError):
                print("‚ö†Ô∏è Opci√≥n inv√°lida.")
                continue

            catalogo = CatalogoPeliculas(nombre_sel)
            print(f"\nüìÇ Trabajando en el cat√°logo: '{catalogo.nombre}'")

            # === SUBMEN√ö DE CAT√ÅLOGO ===
            while True:
                sub_op = menu_catalogo(catalogo.nombre)

                # Agregar pel√≠cula
                if sub_op == "1":
                    titulo = input("üé• Ingres√° el nombre de la pel√≠cula: ").strip()
                    try:
                        peli = Pelicula(titulo)
                        if catalogo.agregar(peli):
                            print(f"‚úÖ '{peli}' agregada correctamente.")
                        else:
                            print("‚ö†Ô∏è Esa pel√≠cula ya existe en el cat√°logo.")
                    except ValueError as e:
                        print(f"‚ö†Ô∏è {e}")

                # Listar pel√≠culas
                elif sub_op == "2":
                    peliculas = catalogo.listar()
                    if not peliculas:
                        print("üì≠ El cat√°logo est√° vac√≠o.")
                    else:
                        print(f"\nüé¨ Pel√≠culas en '{catalogo.nombre}':")
                        for i, p in enumerate(peliculas, start=1):
                            print(f"  {i}. {p}")

                # Eliminar pel√≠cula
                elif sub_op == "3":
                    peliculas = catalogo.listar()
                    if not peliculas:
                        print("üì≠ El cat√°logo est√° vac√≠o, no hay nada para eliminar.")
                        continue

                    print(f"\nüé¨ Pel√≠culas en '{catalogo.nombre}':")
                    for i, p in enumerate(peliculas, start=1):
                        print(f"  {i}. {p}")

                    try:
                        idx = int(input("Seleccion√° el n√∫mero de la pel√≠cula a eliminar: "))
                        peli_sel = peliculas[idx - 1]
                    except (ValueError, IndexError):
                        print("‚ö†Ô∏è Opci√≥n inv√°lida.")
                        continue

                    confirm = input(f"¬øSeguro que quer√©s eliminar '{peli_sel}'? (s√≠/no): ").strip().lower()
                    if confirm in ("si", "s√≠", "s"):
                        # Reescribimos el archivo sin la pel√≠cula seleccionada
                        nuevas = [p for p in peliculas if p.nombre != peli_sel.nombre]
                        with open(catalogo.ruta_archivo, "w", encoding="utf-8") as f:
                            for p in nuevas:
                                f.write(p.to_line() + "\n")
                        print(f"üóëÔ∏è '{peli_sel}' eliminada correctamente del cat√°logo.")
                    else:
                        print("‚Ü©Ô∏è Cancelado.")

                # Volver al men√∫ principal
                elif sub_op == "4":
                    print(f"‚Ü©Ô∏è Volviendo al men√∫ principal desde '{catalogo.nombre}'.")
                    break

                else:
                    print("‚ùå Opci√≥n inv√°lida.")

        # 4Ô∏è‚É£ Eliminar un cat√°logo
        elif opcion == "4":
            catalogos = obtener_catalogos_existentes()
            if not catalogos:
                print("üì≠ No hay cat√°logos para eliminar.")
                continue

            print("\nüìö Cat√°logos existentes:")
            for i, cat in enumerate(catalogos, start=1):
                print(f"  {i}. {cat}")
            try:
                idx = int(input("Seleccion√° un n√∫mero de cat√°logo a eliminar: "))
                nombre_sel = catalogos[idx - 1]
            except (ValueError, IndexError):
                print("‚ö†Ô∏è Opci√≥n inv√°lida.")
                continue

            confirm = input(f"¬øSeguro que quer√©s eliminar '{nombre_sel}'? (s√≠/no): ").strip().lower()
            if confirm in ("si", "s√≠", "s"):
                ruta = os.path.join(BASE_DIR_CATALOGOS, f"{nombre_sel}.txt")
                if os.path.exists(ruta):
                    os.remove(ruta)
                    print(f"üóëÔ∏è Cat√°logo '{nombre_sel}' eliminado.")
                else:
                    print("‚ö†Ô∏è El archivo no existe.")
            else:
                print("‚Ü©Ô∏è Cancelado.")

        # 5Ô∏è‚É£ Salir del programa
        elif opcion == "5":
            print("üëã ¬°Gracias por usar el Gestor de Cat√°logos de Pel√≠culas! Hasta pronto.")
            break

        else:
            print("‚ùå Opci√≥n inv√°lida. Eleg√≠ entre 1 y 5.")


if __name__ == "__main__":
    main()
